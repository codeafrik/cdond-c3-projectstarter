version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   when_to_run:
    #     type: string
    #     default: "on_fail"   
    steps:
      - run:
          name: Destroy environments
          when:  on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

            
  delete-s3-bucket:
    description: Destroy the s3 bucket of the frontend given a workflow ID
    # parameters:
    #   when_to_run:
    #     type: string
    #     dafault: "on_fail"
    steps:
      - run:
          name: Destroy S3 bucket
          when: on_fail
          command: | 
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
       
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # Your Memstash or kvdb.io GET URL code goes here.
            SUCCESS =$(curl --insecure https://kvdb.io/KittzrWFeVZXKu2cTJZV6a/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # logic for reverting the database state.
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert                           
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |  
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - delete-s3-bucket
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["40:fd:27:e4:63:f8:8b:21:ff:8a:2d:a2:dd:42:01:9a"]
      -  attach workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl gzip ansible tar nodejs npm openssh-client git 
            pip install awscli
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment
      - delete-s3-bucket      
      # Here's where you will add some code to rollback on failure 
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migratins_dump.txt
            cat migrations_dump.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.oi/KittzrWFeVZXKu2cTJZV6a/migration_${CIRCLE_WORKFLOW_ID:0:7} -D '1'
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment
      - delete-s3-bucket
     # Here's where you will add some code to rollback on failure 
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible tar gzip nodejs npm openssh-client git
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(AWS ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                      --output text
                      )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - delete-s3-bucket
      # Here's where you will add some code to rollback on failure
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      checkout
      - add_ssh_keys:
          fingerprints: ["40:fd:27:e4:63:f8:8b:21:ff:8a:2d:a2:dd:42:01:9a"]
      -  attach workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible tar gzip nodejs npm openssh-client git
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            mkdir .circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
            ls -lh
            cd .circleci/ansible
            echo "contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - delete-s3-bucket
      
      # Here's where you will add some code to rollback on failure  
      smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible tar gzip nodejs npm openssh-client git
            pip install awscli
      
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(AWS ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:project,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
      - delete-s3-bucket
      # Here's where you will add some code to rollback on failure             


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          